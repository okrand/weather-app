{"version":3,"sources":["weather-api.ts","location-api.ts","Weather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getApiCall","baseUrl","params","axios","create","baseURL","responseType","headers","get","then","response","data","catch","err","axiosError","console","log","getWeatherFromZip","zipcode","countryCode","zip","appid","getLatLon","Promise","resolve","reject","error","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getUsableLocation","result","q","key","results","components","Location","userLocation","userCity","id","Weather","useState","setLocation","undefined","weather","setWeather","weatherIconLink","setWeatherIconLink","useEffect","getLocation","city","state_code","postcode","country_code","newWeather","main","temp","toFixed","icon","src","alt","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"2QAuBaA,EAAa,SAACC,EAAiBC,GAQ1C,OAPkBC,IAAMC,OAAO,CAC7BC,QAASJ,EACTK,aAAc,OACdC,QAAS,CACP,eAAgB,sBAIjBC,IAAI,GAAI,CAAEN,WACVO,MAAK,SAAAC,GACJ,OAAOA,EAASC,QAEjBC,OAAM,SAAAC,GACL,GAAIA,GAAOA,EAAIH,SAAU,CACvB,IAAMI,EAAaD,EACnBE,QAAQC,IAAI,QAASF,QAadG,EARW,SAACC,EAAiBC,GAE1C,OAAOnB,EAAW,kDAAmD,CACnEoB,IAAI,GAAD,OAAKF,EAAL,YAAgBC,GACnBE,MAHa,sCCtBXC,EAAY,IAAIC,SAAkB,SAACC,EAASC,GAChD,IAMMC,EAAQ,WACZX,QAAQW,MAAM,+BAGXC,UAAUC,YAGbD,UAAUC,YAAYC,oBAbR,SAACC,GACf,IAAMC,EAAMD,EAASE,OAAOC,SACtBC,EAAMJ,EAASE,OAAOG,UAC5BX,EAAQ,CAAEO,MAAKG,UAUmCR,GAFlDD,EAAOC,QAoBIU,EARW,IAAIb,SAAwB,SAAAC,GAAO,OAC3DF,EACGb,MAAK,SAAC4B,GARwB,IAACN,EAAaG,EAS3CV,GAT8BO,EASKM,EAAON,IATCG,EASIG,EAAOH,IAR1DlC,EAAW,gEAAiE,CAC1EsC,EAAE,GAAD,OAAKP,EAAL,YAAYG,GACbK,IAAK,qCACJ9B,MAAK,SAAAC,GAAQ,OAAIA,EAAS8B,QAAQ,GAAGC,mBAOrC7B,OAAM,kBAAMG,QAAQW,MAAM,uDC1CzBgB,EAAW,SAACC,GAAiC,IACzCC,EAAaD,EAAbC,SACR,OAAO,uBAAGC,GAAG,YAAYD,IAkCZE,EA/BC,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACbH,EADa,KACHI,EADG,OAEUD,wBAA6BE,GAFvC,mBAEbC,EAFa,KAEJC,EAFI,OAG0BJ,mBAAS,IAHnC,mBAGbK,EAHa,KAGIC,EAHJ,KAoBpB,OAhBAC,qBAAU,WACRC,EACG9C,MAAK,SAAC4B,GACL,IAAMmB,EAAI,UAAMnB,EAAOmB,KAAb,aAAsBnB,EAAOoB,YAEvC,OADAT,EAAYQ,GACLnB,KAER5B,MAAK,SAAA4B,GAAM,OAAIpB,EAAkBoB,EAAOqB,SAAUrB,EAAOsB,iBACzDlD,MAAK,SAACmD,GACLA,GAAcT,GApBuC,KAoBvBS,EAAWC,KAAKC,KApBH,QAAgB,IAAIC,WAqB/DH,GACEP,EAAmB,oCAAD,OACoBO,EAAWV,QAAQ,GAAGc,KAD1C,iBAIvB,IACId,EACL,6BACE,yBAAKe,IAAKb,EAAiBc,IAAI,iBAC/B,uBAAGrB,GAAG,WAAWK,GAAO,UAAOA,EAAP,UACxB,kBAAC,EAAD,CAAUN,SAAUA,KAGtB,uBAAGC,GAAG,WAAN,aC5BWsB,G,MAVH,WACV,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,UCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdtE,OAAM,SAAAc,GACLX,QAAQW,MAAMA,EAAMyD,c","file":"static/js/main.3b230460.chunk.js","sourcesContent":["import axios, { AxiosError } from \"axios\"\n\nexport type WeatherResponse = {\n  weather: [\n    {\n      id: number\n      main: string\n      description: string\n      icon: string\n    }\n  ]\n  main: {\n    temp: number\n    feels_like: number\n    temp_min: number\n    temp_max: number\n    pressure: number\n    humidity: number\n  }\n  name: string\n  cod: number\n}\n\nexport const getApiCall = (baseUrl: string, params: any) => {\n  const apiClient = axios.create({\n    baseURL: baseUrl,\n    responseType: \"json\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  })\n  return apiClient\n    .get(\"\", { params })\n    .then(response => {\n      return response.data\n    })\n    .catch(err => {\n      if (err && err.response) {\n        const axiosError = err as AxiosError\n        console.log(\"ERROR\", axiosError)\n      }\n    })\n}\n\nconst getWeatherFromZip = (zipcode: string, countryCode: string) => {\n  const apiKey = \"ad0d33a326c6e9e2b0a8c4f9cfe9adbc\"\n  return getApiCall(\"https://api.openweathermap.org/data/2.5/weather\", {\n    zip: `${zipcode},${countryCode}`,\n    appid: apiKey\n  })\n}\n\nexport default getWeatherFromZip\n","import { getApiCall } from \"./weather-api\"\n\ntype GeoPosition = {\n  coords: {\n    latitude: number\n    longitude: number\n  }\n}\n\ntype Position = {\n  lat: number\n  lon: number\n}\n\nexport type LocationResult = {\n  city: string\n  country_code: string\n  postcode: string\n  road: string\n  state: string\n  state_code: string\n}\n\nconst getLatLon = new Promise<Position>((resolve, reject) => {\n  const success = (position: GeoPosition) => {\n    const lat = position.coords.latitude\n    const lon = position.coords.longitude\n    resolve({ lat, lon })\n  }\n\n  const error = () => {\n    console.error(\"Couldn't Retrieve Location\")\n  }\n\n  if (!navigator.geolocation) {\n    reject(error())\n  } else {\n    navigator.geolocation.getCurrentPosition(success, error)\n  }\n})\n\nconst getLocationFromCoordinates = (lat: number, lon: number) =>\n  getApiCall(\"https://api.opencagedata.com/geocode/v1/json?no_annotations=1\", {\n    q: `${lat},${lon}`,\n    key: \"0264db5477fe4b1c9ee9ae23b3ec59e5\"\n  }).then(response => response.results[0].components)\n\nconst getUsableLocation = new Promise<LocationResult>(resolve =>\n  getLatLon\n    .then((result: Position) => {\n      resolve(getLocationFromCoordinates(result.lat, result.lon))\n    })\n    .catch(() => console.error(\"Couldn't Get Your Location, Check Coordinates\"))\n)\n\nexport default getUsableLocation\n","import React, { useState, useEffect } from \"react\"\nimport getLocation, { LocationResult } from \"./location-api\"\nimport getWeatherFromZip, { WeatherResponse } from \"./weather-api\"\n\ntype LocationProps = {\n  userCity: string\n}\n\nexport const kToF = (kelvin: number) => ((kelvin - 273.15) * 1.8 + 32).toFixed()\n\nconst Location = (userLocation: LocationProps) => {\n  const { userCity } = userLocation\n  return <p id=\"location\">{userCity}</p>\n}\n\nconst Weather = () => {\n  const [userCity, setLocation] = useState(\"\")\n  const [weather, setWeather] = useState<string | undefined>(undefined)\n  const [weatherIconLink, setWeatherIconLink] = useState(\"\")\n  useEffect(() => {\n    getLocation\n      .then((result: LocationResult) => {\n        const city = `${result.city}, ${result.state_code}`\n        setLocation(city)\n        return result\n      })\n      .then(result => getWeatherFromZip(result.postcode, result.country_code))\n      .then((newWeather: WeatherResponse) => {\n        newWeather && setWeather(kToF(newWeather.main.temp))\n        newWeather &&\n          setWeatherIconLink(\n            `http://openweathermap.org/img/wn/${newWeather.weather[0].icon}@2x.png`\n          )\n      })\n  }, [])\n  return weather ? (\n    <div>\n      <img src={weatherIconLink} alt=\"weather-icon\" />\n      <p id=\"weather\">{weather && `${weather}Â°F`}</p>\n      <Location userCity={userCity} />\n    </div>\n  ) : (\n    <p id=\"loading\">Loading!</p>\n  )\n}\n\nexport default Weather\n","import React from \"react\"\nimport Weather from \"./Weather\"\nimport \"./App.css\"\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Weather />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}